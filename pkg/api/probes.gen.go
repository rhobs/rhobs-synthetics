//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ApiServerUrlSchema The API server URL for the cluster.
type ApiServerUrlSchema = string

// ClusterIdSchema The unique identifier of an HCP cluster (UUID format).
type ClusterIdSchema = openapi_types.UUID

// ClusterIsPrivateSchema Indicates if the cluster associated with the probe is private.
type ClusterIsPrivateSchema = bool

// CreateProbeRequest defines model for CreateProbeRequest.
type CreateProbeRequest struct {
	// ApiserverUrl The API server URL for the cluster.
	ApiserverUrl ApiServerUrlSchema `json:"apiserver_url"`

	// ClusterId The unique identifier of an HCP cluster (UUID format).
	ClusterId ClusterIdSchema `json:"cluster_id"`

	// ManagementClusterId The unique identifier of an HCP Management Cluster (UUID format).
	ManagementClusterId ManagementClusterIdSchema `json:"management_cluster_id"`

	// Private Indicates if the cluster associated with the probe is private.
	Private ClusterIsPrivateSchema `json:"private"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error struct {
		// Code HTTP status code.
		Code int32 `json:"code"`

		// Message A human-readable error message.
		Message string `json:"message"`
	} `json:"error"`
}

// ErrorResponseNotFound defines model for ErrorResponseNotFound.
type ErrorResponseNotFound struct {
	Error struct {
		Code    *interface{} `json:"code,omitempty"`
		Message *interface{} `json:"message,omitempty"`
	} `json:"error"`
}

// ManagementClusterIdSchema The unique identifier of an HCP Management Cluster (UUID format).
type ManagementClusterIdSchema = openapi_types.UUID

// ProbeObject Represents a single probe configuration.
type ProbeObject struct {
	// ApiserverUrl The API server URL for the cluster.
	ApiserverUrl ApiServerUrlSchema `json:"apiserver_url"`

	// Id The unique identifier of an HCP cluster (UUID format).
	Id ClusterIdSchema `json:"id"`

	// ManagementClusterId The unique identifier of an HCP Management Cluster (UUID format).
	ManagementClusterId ManagementClusterIdSchema `json:"management_cluster_id"`

	// Private Indicates if the cluster associated with the probe is private.
	Private ClusterIsPrivateSchema `json:"private"`
}

// ProbesArrayResponse defines model for ProbesArrayResponse.
type ProbesArrayResponse struct {
	// Probes Array containing one or more probe objects.
	Probes []ProbeObject `json:"probes"`
}

// ClusterIdPathParam The unique identifier of an HCP cluster (UUID format).
type ClusterIdPathParam = ClusterIdSchema

// ClusterIsPrivateQueryParam Indicates if the cluster associated with the probe is private.
type ClusterIsPrivateQueryParam = ClusterIsPrivateSchema

// ManagementClusterIdQueryParam The unique identifier of an HCP Management Cluster (UUID format).
type ManagementClusterIdQueryParam = ManagementClusterIdSchema

// ListProbesParams defines parameters for ListProbes.
type ListProbesParams struct {
	// ManagementClusterId Filter by management cluster ID.
	ManagementClusterId *ManagementClusterIdQueryParam `form:"management_cluster_id,omitempty" json:"management_cluster_id,omitempty"`

	// Private Filter by private/public clusters. Defaults to false.
	Private *ClusterIsPrivateQueryParam `form:"private,omitempty" json:"private,omitempty"`
}

// CreateProbeJSONRequestBody defines body for CreateProbe for application/json ContentType.
type CreateProbeJSONRequestBody = CreateProbeRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of all configured probes
	// (GET /metrics/probes)
	ListProbes(w http.ResponseWriter, r *http.Request, params ListProbesParams)
	// Creates a new probe
	// (POST /metrics/probes)
	CreateProbe(w http.ResponseWriter, r *http.Request)
	// Deletes a probe matching provided ID
	// (DELETE /metrics/probes/{cluster_id})
	DeleteProbe(w http.ResponseWriter, r *http.Request, clusterId ClusterIdPathParam)
	// Get a probe by Cluster ID
	// (GET /metrics/probes/{cluster_id})
	GetProbeById(w http.ResponseWriter, r *http.Request, clusterId ClusterIdPathParam)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListProbes operation middleware
func (siw *ServerInterfaceWrapper) ListProbes(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProbesParams

	// ------------- Optional query parameter "management_cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "management_cluster_id", r.URL.Query(), &params.ManagementClusterId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "management_cluster_id", Err: err})
		return
	}

	// ------------- Optional query parameter "private" -------------

	err = runtime.BindQueryParameter("form", true, false, "private", r.URL.Query(), &params.Private)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "private", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProbes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProbe operation middleware
func (siw *ServerInterfaceWrapper) CreateProbe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProbe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProbe operation middleware
func (siw *ServerInterfaceWrapper) DeleteProbe(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cluster_id" -------------
	var clusterId ClusterIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_id", r.PathValue("cluster_id"), &clusterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProbe(w, r, clusterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProbeById operation middleware
func (siw *ServerInterfaceWrapper) GetProbeById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cluster_id" -------------
	var clusterId ClusterIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_id", r.PathValue("cluster_id"), &clusterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProbeById(w, r, clusterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/metrics/probes", wrapper.ListProbes)
	m.HandleFunc("POST "+options.BaseURL+"/metrics/probes", wrapper.CreateProbe)
	m.HandleFunc("DELETE "+options.BaseURL+"/metrics/probes/{cluster_id}", wrapper.DeleteProbe)
	m.HandleFunc("GET "+options.BaseURL+"/metrics/probes/{cluster_id}", wrapper.GetProbeById)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYW27bOBfeCsH/f5gBJFtylCbxWy7T1kDbeOLmqQhaWjqy2ZFIhaTcGoGB2cZsb1Yy",
	"OKQlWbacG9JiMI+WePnO+S6kfEdjmRdSgDCaDu9owRTLwYCyv86zUhtQo2TMzHyMr/BpAjpWvDBcCjqk",
	"H+dARhdEpsTMgbw9H5PYzSJGEgVGcViAfVcoOQWSStWjHoXvLC8yoEOaDE6CNATwX8WHkR9Ng9A/CeCV",
	"nxwF4VF0nAbHhyH1KMfNCmbm1KOC5ThzvdFnnlCPKrgtuYKEDo0qwaM6nkPOEO//FaR0SP/Xb0rtu7e6",
	"X1c4ccNXK6+uWo8VXzADv5eglnuqf80zLHW6JIUb3C/Kacbjqgm6Ry4gZWVmNPYjZZmGXlXNLS7clLNe",
	"gT4Ve4Vzo4T3TLAZ5CBMXeDjqsjriTWNo4s2X+HBIAyS6MSPwnDgR4ME/GM4jP3gII2i48HJII6jPRU2",
	"q39ucfe4ejuKqkteVYtY3Z4WfAJqAepaZZN67V3dno5HRNuB5PrqHUrTCnWNrV323JhCD/t9VvDe+qlf",
	"DUyl7CWw0HOemp5UM+rRVKqcGTqkpcqoR82ywEW0UVzM6IbIkvvwlYLflkB4AsLwlINCmzHRctkv19ej",
	"C+K2+/VZzmqglpaNvVi3hLYDeSQSHjMDmvB0s5GEaS1jzgwk5Bs384004LoyTgu69UmNZCplBkxYKAqY",
	"gTHOvYLbErSxqaVkAcpwsOyzgjtSP2PvHxBVh1RW3mayPDVAvD0qf764vToZnh8ITTp+asdmu1neXotW",
	"EG5qVuT0K8QG4f2mlFRXoAspNOzyAfh693EsE9jV0NuPH8dEG2ZKTXBESxZREGzIlQtzMGj0yoWBGSjL",
	"AGjNZh2rn5J5mTPhK2AJm2ZALDayHt92z3uuNRczUrWO1GfjkHzpbNMXIhX5svF710zbVGAPGry7zd0a",
	"71r5IAcfpHktS2FFx7LsMqXDT/dLp03hynsihxsMRe3+N/20piWJBC3+/vMvQ+A711gh1rhVzk33Efbc",
	"qGyWIucPp+YxBCw4imI/DeHAj04Oj/wpHB360eAQXoVhGA0gekxq2novXUU7kK+gUKCRAsIIyiyrEjGW",
	"IuWzUjEc2bPOe+Fw+0+G2ouFmaVNnyrFlvsjzVKlO/IFpyGFhnGB4SEFYCjkUlX8up20vQQayPVD9W/K",
	"qHEKw412mrCG1REjSLtIZQfi8cjee2yrEPFZxuI/pvI7cY2wL68uJ6fWSefVrRYFz431y9Xby7MJmSyF",
	"mYPhsa4mno5H1KMLUNrtFPSCXoglyAIEKzgd0oNe0DtAPpiZ20b0c/xgiHW/afAMrH2w+9YSo4QO6Tuu",
	"jdvGzm6+WfbEXDOkf//VGJPvgQXu+TxY3SAfTjQW/CAIXEwKA8I4/xYZXpK4FP2vGhtz98jrb5cwLbHb",
	"R1zGtbHpl2V1muDxZef3kIHoBWFtnRy7gEZiwTKe2HMUtGmOUcSC9/Yyz5la0iF9A4aw++Gj7thMb4od",
	"o0TqDpFs3BXX34egzZlMli9We8dtdNX2JH6LrnZEEf5sUbizN7ZwE6LLOAat0zLLltscuJLwVBLwzTW9",
	"q+crb9ur/bsmYlcuZzJw8d6m5cI+r2h5mnk7/pDo8Fy0G3Pry4fdeqsB5IMkay7W5oh+jDnqW9legoQ0",
	"JMUh26y4niEr7hDJmYnnmNaFkgueQEJGF93W6IzPN+DS82w5Sn4QBz899863oqLp0fprs+rTv5ZkF38O",
	"/HRZX1W7mbW3ZvdwW+uXFdeaKMis440ka7c2OVr/62R/r25W/wQAAP//a7itHgwUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
