//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ApiServerUrlSchema The API server URL for the cluster.
type ApiServerUrlSchema = string

// ClusterIdSchema The unique identifier of an HCP cluster (UUID format).
type ClusterIdSchema = openapi_types.UUID

// ClusterIsPrivateSchema Indicates if the cluster associated with the probe is private.
type ClusterIsPrivateSchema = bool

// CreateProbeRequest defines model for CreateProbeRequest.
type CreateProbeRequest struct {
	// ApiserverUrl The API server URL for the cluster.
	ApiserverUrl ApiServerUrlSchema `json:"apiserver_url"`

	// ClusterId The unique identifier of an HCP cluster (UUID format).
	ClusterId ClusterIdSchema `json:"cluster_id"`

	// ManagementClusterId The unique identifier of an HCP Management Cluster (UUID format).
	ManagementClusterId ManagementClusterIdSchema `json:"management_cluster_id"`

	// Private Indicates if the cluster associated with the probe is private.
	Private ClusterIsPrivateSchema `json:"private"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error struct {
		// Code HTTP status code.
		Code int32 `json:"code"`

		// Message A human-readable error message.
		Message string `json:"message"`
	} `json:"error"`
}

// ErrorResponseNotFound defines model for ErrorResponseNotFound.
type ErrorResponseNotFound struct {
	Error struct {
		Code    *interface{} `json:"code,omitempty"`
		Message *interface{} `json:"message,omitempty"`
	} `json:"error"`
}

// ManagementClusterIdSchema The unique identifier of an HCP Management Cluster (UUID format).
type ManagementClusterIdSchema = openapi_types.UUID

// ProbeObject Represents a single probe configuration.
type ProbeObject struct {
	// ApiserverUrl The API server URL for the cluster.
	ApiserverUrl ApiServerUrlSchema `json:"apiserver_url"`

	// Id The unique identifier of an HCP cluster (UUID format).
	Id ClusterIdSchema `json:"id"`

	// ManagementClusterId The unique identifier of an HCP Management Cluster (UUID format).
	ManagementClusterId ManagementClusterIdSchema `json:"management_cluster_id"`

	// Private Indicates if the cluster associated with the probe is private.
	Private ClusterIsPrivateSchema `json:"private"`
}

// ProbesArrayResponse defines model for ProbesArrayResponse.
type ProbesArrayResponse struct {
	// Probes Array containing one or more probe objects.
	Probes []ProbeObject `json:"probes"`
}

// ClusterIdPathParam The unique identifier of an HCP cluster (UUID format).
type ClusterIdPathParam = ClusterIdSchema

// ClusterIsPrivateQueryParam Indicates if the cluster associated with the probe is private.
type ClusterIsPrivateQueryParam = ClusterIsPrivateSchema

// ManagementClusterIdQueryParam The unique identifier of an HCP Management Cluster (UUID format).
type ManagementClusterIdQueryParam = ManagementClusterIdSchema

// ListProbesParams defines parameters for ListProbes.
type ListProbesParams struct {
	// ManagementClusterId Filter by management cluster ID.
	ManagementClusterId *ManagementClusterIdQueryParam `form:"management_cluster_id,omitempty" json:"management_cluster_id,omitempty"`

	// Private Filter by private/public clusters. Defaults to false.
	Private *ClusterIsPrivateQueryParam `form:"private,omitempty" json:"private,omitempty"`
}

// CreateProbeJSONRequestBody defines body for CreateProbe for application/json ContentType.
type CreateProbeJSONRequestBody = CreateProbeRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of all configured probes
	// (GET /metrics/probes)
	ListProbes(w http.ResponseWriter, r *http.Request, params ListProbesParams)
	// Creates a new probe
	// (POST /metrics/probes)
	CreateProbe(w http.ResponseWriter, r *http.Request)
	// Deletes a probe matching provided ID
	// (DELETE /metrics/probes/{cluster_id})
	DeleteProbe(w http.ResponseWriter, r *http.Request, clusterId ClusterIdPathParam)
	// Get a probe by Cluster ID
	// (GET /metrics/probes/{cluster_id})
	GetProbeById(w http.ResponseWriter, r *http.Request, clusterId ClusterIdPathParam)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListProbes operation middleware
func (siw *ServerInterfaceWrapper) ListProbes(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProbesParams

	// ------------- Optional query parameter "management_cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "management_cluster_id", r.URL.Query(), &params.ManagementClusterId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "management_cluster_id", Err: err})
		return
	}

	// ------------- Optional query parameter "private" -------------

	err = runtime.BindQueryParameter("form", true, false, "private", r.URL.Query(), &params.Private)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "private", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProbes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProbe operation middleware
func (siw *ServerInterfaceWrapper) CreateProbe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProbe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProbe operation middleware
func (siw *ServerInterfaceWrapper) DeleteProbe(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cluster_id" -------------
	var clusterId ClusterIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_id", r.PathValue("cluster_id"), &clusterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProbe(w, r, clusterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProbeById operation middleware
func (siw *ServerInterfaceWrapper) GetProbeById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cluster_id" -------------
	var clusterId ClusterIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_id", r.PathValue("cluster_id"), &clusterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProbeById(w, r, clusterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/metrics/probes", wrapper.ListProbes)
	m.HandleFunc("POST "+options.BaseURL+"/metrics/probes", wrapper.CreateProbe)
	m.HandleFunc("DELETE "+options.BaseURL+"/metrics/probes/{cluster_id}", wrapper.DeleteProbe)
	m.HandleFunc("GET "+options.BaseURL+"/metrics/probes/{cluster_id}", wrapper.GetProbeById)

	return m
}

type ListProbesRequestObject struct {
	Params ListProbesParams
}

type ListProbesResponseObject interface {
	VisitListProbesResponse(w http.ResponseWriter) error
}

type ListProbes200JSONResponse ProbesArrayResponse

func (response ListProbes200JSONResponse) VisitListProbesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProbes400JSONResponse ErrorResponse

func (response ListProbes400JSONResponse) VisitListProbesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProbeRequestObject struct {
	Body *CreateProbeJSONRequestBody
}

type CreateProbeResponseObject interface {
	VisitCreateProbeResponse(w http.ResponseWriter) error
}

type CreateProbe201JSONResponse ProbesArrayResponse

func (response CreateProbe201JSONResponse) VisitCreateProbeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProbeRequestObject struct {
	ClusterId ClusterIdPathParam `json:"cluster_id"`
}

type DeleteProbeResponseObject interface {
	VisitDeleteProbeResponse(w http.ResponseWriter) error
}

type DeleteProbe204Response struct {
}

func (response DeleteProbe204Response) VisitDeleteProbeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteProbe404JSONResponse ErrorResponseNotFound

func (response DeleteProbe404JSONResponse) VisitDeleteProbeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProbeByIdRequestObject struct {
	ClusterId ClusterIdPathParam `json:"cluster_id"`
}

type GetProbeByIdResponseObject interface {
	VisitGetProbeByIdResponse(w http.ResponseWriter) error
}

type GetProbeById200JSONResponse ProbesArrayResponse

func (response GetProbeById200JSONResponse) VisitGetProbeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProbeById404JSONResponse ErrorResponseNotFound

func (response GetProbeById404JSONResponse) VisitGetProbeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get a list of all configured probes
	// (GET /metrics/probes)
	ListProbes(ctx context.Context, request ListProbesRequestObject) (ListProbesResponseObject, error)
	// Creates a new probe
	// (POST /metrics/probes)
	CreateProbe(ctx context.Context, request CreateProbeRequestObject) (CreateProbeResponseObject, error)
	// Deletes a probe matching provided ID
	// (DELETE /metrics/probes/{cluster_id})
	DeleteProbe(ctx context.Context, request DeleteProbeRequestObject) (DeleteProbeResponseObject, error)
	// Get a probe by Cluster ID
	// (GET /metrics/probes/{cluster_id})
	GetProbeById(ctx context.Context, request GetProbeByIdRequestObject) (GetProbeByIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListProbes operation middleware
func (sh *strictHandler) ListProbes(w http.ResponseWriter, r *http.Request, params ListProbesParams) {
	var request ListProbesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProbes(ctx, request.(ListProbesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProbes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProbesResponseObject); ok {
		if err := validResponse.VisitListProbesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProbe operation middleware
func (sh *strictHandler) CreateProbe(w http.ResponseWriter, r *http.Request) {
	var request CreateProbeRequestObject

	var body CreateProbeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProbe(ctx, request.(CreateProbeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProbe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProbeResponseObject); ok {
		if err := validResponse.VisitCreateProbeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProbe operation middleware
func (sh *strictHandler) DeleteProbe(w http.ResponseWriter, r *http.Request, clusterId ClusterIdPathParam) {
	var request DeleteProbeRequestObject

	request.ClusterId = clusterId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProbe(ctx, request.(DeleteProbeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProbe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProbeResponseObject); ok {
		if err := validResponse.VisitDeleteProbeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProbeById operation middleware
func (sh *strictHandler) GetProbeById(w http.ResponseWriter, r *http.Request, clusterId ClusterIdPathParam) {
	var request GetProbeByIdRequestObject

	request.ClusterId = clusterId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProbeById(ctx, request.(GetProbeByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProbeById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProbeByIdResponseObject); ok {
		if err := validResponse.VisitGetProbeByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
